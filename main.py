import os
import time
import nltk
nltk.download("punkt")

# ANSI couleurs
CYAN = "\033[96m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
RED = "\033[91m"
RESET = "\033[0m"

def title(text):
    print(f"\n{YELLOW}{'='*60}\n{text.upper()}\n{'='*60}{RESET}")

def menu():
    print(f"\n{CYAN}üì¶ CHOISISSEZ UNE OU PLUSIEURS √âTAPES (s√©par√©es par une virgule) :{RESET}")
    print("1. üß† ENTRA√éNER LES MOD√àLES DE CLASSIFICATION (classify)")
    print("2. üìù ENTRA√éNER LES MOD√àLES DE R√âSUM√â (summarize)")
    print("3. üåç CHARGER ET TESTER LA TRADUCTION (Argos Translate)")
    print("4. üöÄ LANCER L'APPLICATION (interface FastAPI en localhost)")
    print("0. ‚ùå QUITTER")
    return input("\nüëâ Choix (ex: 1,3) : ")

def run_classify():
    title("ENTRA√éNEMENT DU CLASSIFIEUR")
    from chatbot.classify import Classifier
    classifier = Classifier()
    classifier.load_or_train()

def run_summarize():
    title("ENTRA√éNEMENT DU R√âSUMEUR")
    from chatbot.summarize import Summarizer
    summarizer = Summarizer()
    summarizer.load_or_train()

def run_app():
    title("LANCEMENT DE L'INTERFACE FASTAPI")
    time.sleep(1)
    os.system("uvicorn chatbot.interface.app:app --reload")

def run_translate():
    import os
    import urllib.request
    import argostranslate.package
    from termcolor import colored

    title("CHARGEMENT ET TEST DES MOD√àLES DE TRADUCTION")

    # Cr√©e le dossier si n√©cessaire
    model_dir = "models"
    os.makedirs(model_dir, exist_ok=True)

    # URLs des mod√®les
    urls = {
        "fr_en": "https://data.argosopentech.com/argospm/v1/translate-fr_en-1_9.argosmodel",
        "en_fr": "https://data.argosopentech.com/argospm/v1/translate-en_fr-1_9.argosmodel"
    }

    paths = {
        key: os.path.join(model_dir, os.path.basename(url))
        for key, url in urls.items()
    }

    # T√©l√©chargement si absent
    for key, url in urls.items():
        path = paths[key]
        if not os.path.exists(path):
            print(f"‚¨áÔ∏è T√©l√©chargement du mod√®le {key}...")
            try:
                urllib.request.urlretrieve(url, path)
                print(f"‚úÖ Mod√®le {key} t√©l√©charg√© : {path}")
            except Exception as e:
                print(f"‚ùå Erreur lors du t√©l√©chargement de {url} : {e}")
                return

    # Installation des mod√®les
    print("üì¶ Installation du mod√®le FR ‚Üí EN...")
    argostranslate.package.install_from_path(paths["fr_en"])
    print("üì¶ Installation du mod√®le EN ‚Üí FR...")
    argostranslate.package.install_from_path(paths["en_fr"])

    print("‚úÖ Mod√®les install√©s avec succ√®s.")

    # ‚¨ÖÔ∏è Import maintenant que les langues sont install√©es
    try:
        from chatbot.translation import translate_fr_to_en, translate_en_to_fr
        print(colored("Traduction FR ‚Üí EN :", "green"), translate_fr_to_en("Bonjour, comment vas-tu ?"))
        print(colored("Traduction EN ‚Üí FR :", "green"), translate_en_to_fr("What are the benefits of learning AI?"))
    except Exception as e:
        print(colored("‚ùå Erreur : " + str(e), "red"))

if __name__ == "__main__":
    while True:
        choix = menu().replace(" ", "").split(",")
        if "0" in choix:
            print(f"{RED}üëã √Ä bient√¥t !{RESET}")
            break
        if "1" in choix:
            run_classify()
        if "2" in choix:
            run_summarize()
        if "3" in choix:
            run_translate()
        if "4" in choix:
           run_app()
