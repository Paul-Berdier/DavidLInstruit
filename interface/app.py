import gradio as gr
from chatbot.response_generator import respond_to
from data.gen_context_dataset import generate_context_dataset
import subprocess
import logging
import os

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


def entrainer_model(prompt_utilisateur):
    # G√©n√©ration du dataset √† partir du th√®me
    df = generate_context_dataset(prompt_utilisateur)
    if df is None or len(df) < 4:
        return "‚ùå Pas assez de contenu r√©cup√©r√© pour entra√Æner un mod√®le."

    # Lancement du script d'entra√Ænement
    logging.info("üîÅ Entra√Ænement en cours...")
    result = subprocess.run(["python", "main.py"], capture_output=True, text=True)
    if result.returncode != 0:
        logging.error(result.stderr)
        return "‚ùå Erreur lors de l'entra√Ænement. Consulte les logs."

    return f"‚úÖ Mod√®le entra√Æn√© avec succ√®s sur {len(df)} textes !"


def repondre(prompt, nb_lignes):
    return respond_to(prompt, max_lines=nb_lignes)


# üß† Interface Gradio
with gr.Blocks(title="David l'instruit") as demo:
    gr.Markdown("### üßë‚Äçüè´ David l‚Äôinstruit\n\nLe chatbot intelligent et p√©nible. Oui je le savais-tu ‚òùÔ∏èü§ì")

    with gr.Row():
        prompt_theme = gr.Textbox(label="D√©cris un th√®me pour entra√Æner David",
                                  placeholder="ex : l'impact des robots dans l'√©ducation")
        bouton_entrainer = gr.Button("Cr√©er un mod√®le contextuel üõ†Ô∏è")

    sortie_entrainement = gr.Textbox(label="üß™ √âtat d'entra√Ænement", interactive=False)
    bouton_entrainer.click(fn=entrainer_model, inputs=[prompt_theme], outputs=[sortie_entrainement])

    gr.Markdown("---")

    with gr.Row():
        prompt_question = gr.Textbox(label="Pose ta question √† David", placeholder="ex : Quel est le r√¥le de l'IA ?")
        max_lignes = gr.Slider(minimum=1, maximum=10, value=3, label="üìè R√©ponse maximale (lignes)")

    bouton_repondre = gr.Button("R√©ponds, David ! ü§ñ")
    sortie = gr.Textbox(label="üí¨ R√©ponse de David", lines=5)
    bouton_repondre.click(fn=repondre, inputs=[prompt_question, max_lignes], outputs=[sortie])

# üî• Lancer l'app
if __name__ == "__main__":
    demo.launch()
